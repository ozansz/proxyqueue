// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proxyqueue/v1/proxyqueue.proto

package proxyqueuev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.sazak.io/proxyqueue/gen/proxyqueue/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxyQueueServiceName is the fully-qualified name of the ProxyQueueService service.
	ProxyQueueServiceName = "proxyqueue.v1.ProxyQueueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxyQueueServiceSubmitURLProcedure is the fully-qualified name of the ProxyQueueService's
	// SubmitURL RPC.
	ProxyQueueServiceSubmitURLProcedure = "/proxyqueue.v1.ProxyQueueService/SubmitURL"
)

// ProxyQueueServiceClient is a client for the proxyqueue.v1.ProxyQueueService service.
type ProxyQueueServiceClient interface {
	SubmitURL(context.Context, *connect.Request[v1.SubmitURLRequest]) (*connect.Response[v1.SubmitURLResponse], error)
}

// NewProxyQueueServiceClient constructs a client for the proxyqueue.v1.ProxyQueueService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxyQueueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxyQueueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	proxyQueueServiceMethods := v1.File_proxyqueue_v1_proxyqueue_proto.Services().ByName("ProxyQueueService").Methods()
	return &proxyQueueServiceClient{
		submitURL: connect.NewClient[v1.SubmitURLRequest, v1.SubmitURLResponse](
			httpClient,
			baseURL+ProxyQueueServiceSubmitURLProcedure,
			connect.WithSchema(proxyQueueServiceMethods.ByName("SubmitURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxyQueueServiceClient implements ProxyQueueServiceClient.
type proxyQueueServiceClient struct {
	submitURL *connect.Client[v1.SubmitURLRequest, v1.SubmitURLResponse]
}

// SubmitURL calls proxyqueue.v1.ProxyQueueService.SubmitURL.
func (c *proxyQueueServiceClient) SubmitURL(ctx context.Context, req *connect.Request[v1.SubmitURLRequest]) (*connect.Response[v1.SubmitURLResponse], error) {
	return c.submitURL.CallUnary(ctx, req)
}

// ProxyQueueServiceHandler is an implementation of the proxyqueue.v1.ProxyQueueService service.
type ProxyQueueServiceHandler interface {
	SubmitURL(context.Context, *connect.Request[v1.SubmitURLRequest]) (*connect.Response[v1.SubmitURLResponse], error)
}

// NewProxyQueueServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxyQueueServiceHandler(svc ProxyQueueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxyQueueServiceMethods := v1.File_proxyqueue_v1_proxyqueue_proto.Services().ByName("ProxyQueueService").Methods()
	proxyQueueServiceSubmitURLHandler := connect.NewUnaryHandler(
		ProxyQueueServiceSubmitURLProcedure,
		svc.SubmitURL,
		connect.WithSchema(proxyQueueServiceMethods.ByName("SubmitURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proxyqueue.v1.ProxyQueueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxyQueueServiceSubmitURLProcedure:
			proxyQueueServiceSubmitURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxyQueueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxyQueueServiceHandler struct{}

func (UnimplementedProxyQueueServiceHandler) SubmitURL(context.Context, *connect.Request[v1.SubmitURLRequest]) (*connect.Response[v1.SubmitURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proxyqueue.v1.ProxyQueueService.SubmitURL is not implemented"))
}
